Parser.py:410: SyntaxWarning: name 'WarningsCounter' is used prior to global declaration
  global WarningsCounter
Parser.py:418: SyntaxWarning: name 'WarningsCounter' is assigned to before global declaration
  global WarningsCounter
Parser.py:427: SyntaxWarning: name 'WarningsCounter' is assigned to before global declaration
  global WarningsCounter
Parser.py:435: SyntaxWarning: name 'WarningsCounter' is used prior to global declaration
  global WarningsCounter
Parser.py:531: SyntaxWarning: name 'FoundFLPMulDiv' is assigned to before global declaration
  global FoundFLPMulDiv
Parser.py:543: SyntaxWarning: name 'FoundFLPMulDiv' is assigned to before global declaration
  global FoundFLPMulDiv
Parser.py:546: SyntaxWarning: name 'FoundFLPMulDiv' is assigned to before global declaration
  global FoundFLPMulDiv
Parser.py:604: SyntaxWarning: name 'FoundFLPMulDiv' is assigned to before global declaration
  global FoundFLPMulDiv
Parser.py:616: SyntaxWarning: name 'FoundFLPMulDiv' is assigned to before global declaration
  global FoundFLPMulDiv
Parser.py:619: SyntaxWarning: name 'FoundFLPMulDiv' is assigned to before global declaration
  global FoundFLPMulDiv
Parser.py:701: SyntaxWarning: name 'WarpDivergenceRatio' is used prior to global declaration
  global WarpDivergenceRatio
Parser.py:870: SyntaxWarning: name 'StartAnalyzing' is assigned to before global declaration
  global StartAnalyzing
scope - pushing Global
For count stack - pushing 1
If ratio stack - pushing 1
**************************************************************************
****			C Code Parser   			      ****
**************************************************************************
****		   Please Use Python 2.7 or later		      ****
**************************************************************************
../Input_C_Parser/Test7.txt
struct float3 { float x, y, z; };

scope - pushing struct
[]
iterations = 2000;

[]
nelr = 97046;

[]
NVAR = 5;

[]
GAMMA = 1.4;

[]
VAR_MOMENTUM = 1;

[]
VAR_DENSITY = 0;

[]
VAR_DENSITY_ENERGY = 4;

[]
float variables[nelr*NVAR]

[]
float old_variables[nelr*NVAR]

[]
float fluxes[nelr*NVAR];

[]
float ff_variable[NVAR], step_factors[nelr], areas[nelr];

[]


[]


[]
for(int iter=0; iter < iterations; iter++){

scope - pushing For
For count stack - pushing 1
[]
    for(int i = 0; i < nelr*NVAR; i++){

scope - pushing For
For count stack - pushing 1
[]
        old_variables[i] = variables[i];

[]
    }

[]
    for(int i = 0; i < nelr; i++){

scope - pushing For
For count stack - pushing 1
[]
        float density = variables[NVAR*i + VAR_DENSITY];

[]
        float3 momentum;

[]
        momentum.x = variables[NVAR*i + (VAR_MOMENTUM+0)];

[]
        momentum.y = variables[NVAR*i + (VAR_MOMENTUM+1)];

[]
        momentum.z = variables[NVAR*i + (VAR_MOMENTUM+2)];

[]


[]
        float density_energy = variables[NVAR*i + VAR_DENSITY_ENERGY];

[]


[]
        float3 velocity;

[]
        velocity.x = momentum.x / density;

[]
        velocity.y = momentum.y / density;

[]
        velocity.z = momentum.z / density;

[]


[]
        float speed_sqd = velocity.x*velocity.x + velocity.y*velocity.y + velocity.z*velocity.z;

[]
        float pressure = (float(GAMMA)-float(1.0f))*(density_energy - float(0.5f)*density*speed_sqd);

[]
        float speed_of_sound = sqrtf(float(GAMMA)*pressure/density);

[]
        step_factors[i] = float(0.5f) / (sqrtf(areas[i]) * (sqrtf(speed_sqd) + speed_of_sound));

[]
    }

[]


[]
    for(int j = 0; j < RK; j++){

scope - pushing For
For count stack - pushing 1
[]
        compute_flux(nelr, elements_surrounding_elements, normals, variables, fluxes);

[]
####Annotation Begins####

Annotation Begin Found
[]
[]
[]
0
TotalArithmeticInstructions  0
0
0
TotalArithmeticInstructions  0
        for(int i = 0; i < nelr; i++){ ##NTRATIO97046

scope - pushing For
For count stack - pushing 1
['NTRATIO97046']
['97046']
['<', '++']
[]
2
TotalArithmeticInstructions  2
0
0
TotalArithmeticInstructions  2
extractEveryVariable
            float factor = step_factors[i]/float(RK+1-j);

[]
['/', '+', '-']
[]
3
TotalArithmeticInstructions  5
0
0
TotalArithmeticInstructions  5
Checking double store operation
Checking double store operation - Done
Division Found
####
42   /
43   f
41   ]
 step_factors
float(RK+1-j);

match
float(RK
51   +
extractEveryVariable
 

[]
[]
[]
0
TotalArithmeticInstructions  5
0
0
TotalArithmeticInstructions  5
extractEveryVariable
            variables[NVAR*i + VAR_DENSITY] = old_variables[NVAR*i + VAR_DENSITY] + factor*fluxes[NVAR*i + VAR_DENSITY];

[]
['*', '+', '*', '+', '+', '*', '*', '+']
[]
8
TotalArithmeticInstructions  13
3
3
TotalArithmeticInstructions  7
offset pattern is
NVAR*i + VAR_DENSITY
and extracted value is
[' VAR_DENSITY']
Offset is
VAR_DENSITY
1. Offset seems to be a variable hard to determine! Not marking it as irregular access/access generating many transactions! PLEASE VERIFY!---- variables[NVAR*i + VAR_DENSITY] = old_variables[NVAR*i + VAR_DENSITY] + factor*fluxes[NVAR*i + VAR_DENSITY];

offset pattern is
NVAR*i + VAR_DENSITY
and extracted value is
[' VAR_DENSITY']
Offset is
VAR_DENSITY
2. Offset seems to be a variable hard to determine! Not marking it as irregular access/access generating many transactions! PLEASE VERIFY!---- variables[NVAR*i + VAR_DENSITY] = old_variables[NVAR*i + VAR_DENSITY] + factor*fluxes[NVAR*i + VAR_DENSITY];

offset pattern is
NVAR*i + VAR_DENSITY
and extracted value is
[' VAR_DENSITY']
Offset is
VAR_DENSITY
3. Offset seems to be a variable hard to determine! Not marking it as irregular access/access generating many transactions! PLEASE VERIFY!---- variables[NVAR*i + VAR_DENSITY] = old_variables[NVAR*i + VAR_DENSITY] + factor*fluxes[NVAR*i + VAR_DENSITY];

Checking double store operation
21   [
20   s
            variables
match
variables
Found variable in List!
Checking double store operation - Done
####
26   *
27   i
25   R

i + VAR_DENSITY] = old_variables[NVAR*i + VAR_DENSITY] + factor*fluxes[NVAR*i + VAR_DENSITY];

match
i
28    
####
64   *
65   i
63   R
 + VAR_DENSITY] = old_variables[NVAR
match
VAR_DENSITY] = old_variables[NVAR
i + VAR_DENSITY] + factor*fluxes[NVAR*i + VAR_DENSITY];

match
i
66    
####
90   *
91   f
89   r
 + VAR_DENSITY] + factor
match
VAR_DENSITY] + factor
fluxes[NVAR*i + VAR_DENSITY];

match
fluxes
97   [
119
####
102   *
103   i
101   R

i + VAR_DENSITY];

match
i
104    
extractEveryVariable
            variables[NVAR*i + VAR_DENSITY_ENERGY] = old_variables[NVAR*i + VAR_DENSITY_ENERGY] + factor*fluxes[NVAR*i + VAR_DENSITY_ENERGY];

[]
['*', '+', '*', '+', '+', '*', '*', '+']
[]
8
TotalArithmeticInstructions  15
3
3
TotalArithmeticInstructions  9
offset pattern is
NVAR*i + VAR_DENSITY_ENERGY
and extracted value is
[' VAR_DENSITY_ENERGY']
Offset is
VAR_DENSITY_ENERGY
4. Offset seems to be a variable hard to determine! Not marking it as irregular access/access generating many transactions! PLEASE VERIFY!---- variables[NVAR*i + VAR_DENSITY_ENERGY] = old_variables[NVAR*i + VAR_DENSITY_ENERGY] + factor*fluxes[NVAR*i + VAR_DENSITY_ENERGY];

offset pattern is
NVAR*i + VAR_DENSITY_ENERGY
and extracted value is
[' VAR_DENSITY_ENERGY']
Offset is
VAR_DENSITY_ENERGY
5. Offset seems to be a variable hard to determine! Not marking it as irregular access/access generating many transactions! PLEASE VERIFY!---- variables[NVAR*i + VAR_DENSITY_ENERGY] = old_variables[NVAR*i + VAR_DENSITY_ENERGY] + factor*fluxes[NVAR*i + VAR_DENSITY_ENERGY];

offset pattern is
NVAR*i + VAR_DENSITY_ENERGY
and extracted value is
[' VAR_DENSITY_ENERGY']
Offset is
VAR_DENSITY_ENERGY
6. Offset seems to be a variable hard to determine! Not marking it as irregular access/access generating many transactions! PLEASE VERIFY!---- variables[NVAR*i + VAR_DENSITY_ENERGY] = old_variables[NVAR*i + VAR_DENSITY_ENERGY] + factor*fluxes[NVAR*i + VAR_DENSITY_ENERGY];

Checking double store operation
21   [
20   s
            variables
match
variables
Found variable in List!
Checking double store operation - Done
####
26   *
27   i
25   R

i + VAR_DENSITY_ENERGY] = old_variables[NVAR*i + VAR_DENSITY_ENERGY] + factor*fluxes[NVAR*i + VAR_DENSITY_ENERGY];

match
i
28    
####
71   *
72   i
70   R
 + VAR_DENSITY_ENERGY] = old_variables[NVAR
match
VAR_DENSITY_ENERGY] = old_variables[NVAR
i + VAR_DENSITY_ENERGY] + factor*fluxes[NVAR*i + VAR_DENSITY_ENERGY];

match
i
73    
####
104   *
105   f
103   r
 + VAR_DENSITY_ENERGY] + factor
match
VAR_DENSITY_ENERGY] + factor
fluxes[NVAR*i + VAR_DENSITY_ENERGY];

match
fluxes
111   [
140
####
116   *
117   i
115   R

i + VAR_DENSITY_ENERGY];

match
i
118    
extractEveryVariable
            variables[NVAR*i + 1] = old_variables[NVAR*i + 1] + factor*fluxes[NVAR*i + 1];

[]
['*', '+', '*', '+', '+', '*', '*', '+']
[]
8
TotalArithmeticInstructions  17
3
3
TotalArithmeticInstructions  11
offset pattern is
NVAR*i + 1
and extracted value is
[' 1']
Offset is
1
Offset is a int with number <=2
offset pattern is
NVAR*i + 1
and extracted value is
[' 1']
Offset is
1
Offset is a int with number <=2
offset pattern is
NVAR*i + 1
and extracted value is
[' 1']
Offset is
1
Offset is a int with number <=2
Checking double store operation
21   [
20   s
            variables
match
variables
Found variable in List!
Checking double store operation - Done
####
26   *
27   i
25   R

i + 1] = old_variables[NVAR*i + 1] + factor*fluxes[NVAR*i + 1];

match
i
28    
####
54   *
55   i
53   R
 + 1] = old_variables[NVAR
match
1] = old_variables[NVAR
i + 1] + factor*fluxes[NVAR*i + 1];

match
i
56    
####
70   *
71   f
69   r
 + 1] + factor
match
1] + factor
fluxes[NVAR*i + 1];

match
fluxes
77   [
89
####
82   *
83   i
81   R

i + 1];

match
i
84    
extractEveryVariable
            variables[NVAR*i + 2] = old_variables[NVAR*i + 2] + factor*fluxes[NVAR*i + 2];

[]
['*', '+', '*', '+', '+', '*', '*', '+']
[]
8
TotalArithmeticInstructions  19
3
3
TotalArithmeticInstructions  13
offset pattern is
NVAR*i + 2
and extracted value is
[' 2']
Offset is
2
Offset is a int with number <=2
offset pattern is
NVAR*i + 2
and extracted value is
[' 2']
Offset is
2
Offset is a int with number <=2
offset pattern is
NVAR*i + 2
and extracted value is
[' 2']
Offset is
2
Offset is a int with number <=2
Checking double store operation
21   [
20   s
            variables
match
variables
Found variable in List!
Checking double store operation - Done
####
26   *
27   i
25   R

i + 2] = old_variables[NVAR*i + 2] + factor*fluxes[NVAR*i + 2];

match
i
28    
####
54   *
55   i
53   R
 + 2] = old_variables[NVAR
match
2] = old_variables[NVAR
i + 2] + factor*fluxes[NVAR*i + 2];

match
i
56    
####
70   *
71   f
69   r
 + 2] + factor
match
2] + factor
fluxes[NVAR*i + 2];

match
fluxes
77   [
89
####
82   *
83   i
81   R

i + 2];

match
i
84    
extractEveryVariable
            variables[NVAR*i + 3] = old_variables[NVAR*i + 3] + factor*fluxes[NVAR*i + 3];

[]
['*', '+', '*', '+', '+', '*', '*', '+']
[]
8
TotalArithmeticInstructions  21
3
3
TotalArithmeticInstructions  15
offset pattern is
NVAR*i + 3
and extracted value is
[' 3']
Offset is
3
Offset is a int with number <=2
offset pattern is
NVAR*i + 3
and extracted value is
[' 3']
Offset is
3
Offset is a int with number <=2
offset pattern is
NVAR*i + 3
and extracted value is
[' 3']
Offset is
3
Offset is a int with number <=2
Checking double store operation
21   [
20   s
            variables
match
variables
Found variable in List!
Checking double store operation - Done
####
26   *
27   i
25   R

i + 3] = old_variables[NVAR*i + 3] + factor*fluxes[NVAR*i + 3];

match
i
28    
####
54   *
55   i
53   R
 + 3] = old_variables[NVAR
match
3] = old_variables[NVAR
i + 3] + factor*fluxes[NVAR*i + 3];

match
i
56    
####
70   *
71   f
69   r
 + 3] + factor
match
3] + factor
fluxes[NVAR*i + 3];

match
fluxes
77   [
89
####
82   *
83   i
81   R

i + 3];

match
i
84    
extractEveryVariable
        }

Scope Found For, popping, New Length 5
[]
[]
[]
0
TotalArithmeticInstructions  15
0
0
TotalArithmeticInstructions  15
extractEveryVariable
####Annotation Ends####

[]
[]
[]
0
TotalArithmeticInstructions  15
0
0
TotalArithmeticInstructions  15
Annotation End Found
######################################################
**********
The values of this entry are
Name                 -  ff_variable
Scope                -  struct
varType              -  1
size                 -  1
value                -  None
iteratorVar          -  False
**********
The values of this entry are
Name                 -  factor
Scope                -  For
varType              -  1
size                 -  1
value                -  1
iteratorVar          -  True
**********
The values of this entry are
Name                 -  old_variables
Scope                -  struct
varType              -  1
size                 -  1
value                -  None
iteratorVar          -  False
**********
The values of this entry are
Name                 -  density
Scope                -  For
varType              -  1
size                 -  1
value                -  None
iteratorVar          -  False
**********
The values of this entry are
Name                 -  i
Scope                -  For
varType              -  0
size                 -  1
value                -  0
iteratorVar          -  True
**********
The values of this entry are
Name                 -  speed_of_sound
Scope                -  For
varType              -  1
size                 -  1
value                -  None
iteratorVar          -  False
**********
The values of this entry are
Name                 -  variables
Scope                -  struct
varType              -  1
size                 -  1
value                -  None
iteratorVar          -  False
**********
The values of this entry are
Name                 -  j
Scope                -  For
varType              -  0
size                 -  1
value                -  0
iteratorVar          -  False
**********
The values of this entry are
Name                 -  iter
Scope                -  For
varType              -  0
size                 -  1
value                -  0
iteratorVar          -  False
**********
The values of this entry are
Name                 -  density_energy
Scope                -  For
varType              -  1
size                 -  1
value                -  None
iteratorVar          -  False
**********
The values of this entry are
Name                 -  speed_sqd
Scope                -  For
varType              -  1
size                 -  1
value                -  None
iteratorVar          -  False
**********
The values of this entry are
Name                 -  x
Scope                -  struct
varType              -  1
size                 -  1
value                -  None
iteratorVar          -  False
**********
The values of this entry are
Name                 -  pressure
Scope                -  For
varType              -  1
size                 -  1
value                -  1
iteratorVar          -  False
**********
The values of this entry are
Name                 -  fluxes
Scope                -  struct
varType              -  1
size                 -  1
value                -  None
iteratorVar          -  False
**********
***********
Line 1
LHS -  for i
RHS -  i nelr i
Line 2
LHS -  factor
RHS -  step factors i RK j
Line 3
LHS -  variables
RHS -  old variables NVAR i VAR DENSITY factor fluxes NVAR i VAR DENSITY
Line 4
LHS -  variables
RHS -  old variables NVAR i VAR DENSITY ENERGY factor fluxes NVAR i VAR DENSITY ENERGY
Line 5
LHS -  variables
RHS -  old variables NVAR i factor fluxes NVAR i
Line 6
LHS -  variables
RHS -  old variables NVAR i factor fluxes NVAR i
Line 7
LHS -  variables
RHS -  old variables NVAR i factor fluxes NVAR i
***********


TotalTranscendentals - 0
TotalArithmeticInstructions - 15
NumLoadOperations - 11
NumStoreOperations - 5
NumOffsetAccesses -  0
NumIndirectAccesses -  0
NumDoubleAccesses -  0
criticalPath -  0
nThreadsCount -  97046
instCountWithFRatio -  0
Warnings!!!!
1. Offset seems to be a variable hard to determine! Not marking it as irregular access/access generating many transactions! PLEASE VERIFY!---- variables[NVAR*i + VAR_DENSITY] = old_variables[NVAR*i + VAR_DENSITY] + factor*fluxes[NVAR*i + VAR_DENSITY];

2. Offset seems to be a variable hard to determine! Not marking it as irregular access/access generating many transactions! PLEASE VERIFY!---- variables[NVAR*i + VAR_DENSITY] = old_variables[NVAR*i + VAR_DENSITY] + factor*fluxes[NVAR*i + VAR_DENSITY];

3. Offset seems to be a variable hard to determine! Not marking it as irregular access/access generating many transactions! PLEASE VERIFY!---- variables[NVAR*i + VAR_DENSITY] = old_variables[NVAR*i + VAR_DENSITY] + factor*fluxes[NVAR*i + VAR_DENSITY];

4. Offset seems to be a variable hard to determine! Not marking it as irregular access/access generating many transactions! PLEASE VERIFY!---- variables[NVAR*i + VAR_DENSITY_ENERGY] = old_variables[NVAR*i + VAR_DENSITY_ENERGY] + factor*fluxes[NVAR*i + VAR_DENSITY_ENERGY];

5. Offset seems to be a variable hard to determine! Not marking it as irregular access/access generating many transactions! PLEASE VERIFY!---- variables[NVAR*i + VAR_DENSITY_ENERGY] = old_variables[NVAR*i + VAR_DENSITY_ENERGY] + factor*fluxes[NVAR*i + VAR_DENSITY_ENERGY];

6. Offset seems to be a variable hard to determine! Not marking it as irregular access/access generating many transactions! PLEASE VERIFY!---- variables[NVAR*i + VAR_DENSITY_ENERGY] = old_variables[NVAR*i + VAR_DENSITY_ENERGY] + factor*fluxes[NVAR*i + VAR_DENSITY_ENERGY];



######################################################
Transcendental Ratio - L
Arithmetic Intensity - L
Global Memory Operation - H
BranchDivergence - L 0
ControlDensity -  L
Floating Point Mul/Div - H
Total Instruction - L
