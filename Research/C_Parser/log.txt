Hi
if((accessKnode.keys[thid] <= start[bid]) && (accessKnode.keys[thid+1] > start[bid])){
if((accessKnode.keys[thid] <= start[bid]) && (accessKnode.keys[thid+1] > start[bid])){
if((accessKnode.#1# <= #1#) && (accessKnode.#1# > #1#)){
if((accessKnode.#1# <= #1#) && (accessKnode.#1# > #1#)){
if((#2# <= #1#) && (#2# > #1#)){
0=((#2# <= #1#) && (#2# > #1#))
0 =  (  ( #2#    <  =    #1# )     &  &     ( #2#    >    #1# )  ) 
0 =  (  ( #2#    <  =    #1# )     &  &     ( #2#    >    #1# )  ) 
0 =  (  ( #2#    <  =    #1# )     &  &     ( #2#    >    #1# )  ) 
0=((#2#<=#1#)&&(#2#>#1#))
0=((2<=1)&&(2>1))
In While

Start Index is 2
Length is 17
0=((2<=1)&&(2>1))
Start Index is 3
Length is 17
0=((2<=1)&&(2>1))
Start Index is 4
Length is 17
0=((2<=1)&&(2>1))
Start Index is 5
Length is 17
0=((2<=1)&&(2>1))
Start Index is 6
Length is 17
0=((2<=1)&&(2>1))
Start Index is 7
Length is 17
0=((2<=1)&&(2>1))
0=((2<=1)&&(2>1))
0=((3)&&(2>1))
Start Index is 6
Length is 14
0=((3)&&(2>1))
Start Index is 7
Length is 12
0=(3&&(2>1))
Start Index is 8
Length is 12
0=(3&&(2>1))
Start Index is 9
Length is 12
0=(3&&(2>1))
0=(3&&(2>1))
0=(3&&(3))
Start Index is 9
Length is 10
0=(3&&(3))
In While

Start Index is 3
Length is 8
0=(3&&3)
Start Index is 4
Length is 8
0=(3&&3)
Start Index is 5
Length is 8
0=(3&&3)
Start Index is 6
Length is 8
0=(3&&3)
0=(3&&3)
0=(4)
Start Index is 5
Length is 5
0=(4)
Time Taken 4

offset_2[bid] = knodes[access3].indices[thid];
offset_2[bid] = knodes[access3].indices[thid];
#1# = #1#.#1#;
#1# = #2#;
#1# = #2#;
#1# = #2#;
#1#    =    #2# ; 
#1#    =    #2# ; 
#1#    =    #2# ; 
#1#=#2#;
1=2
In While

Start Index is 2
Length is 3
1=2
Time Taken 2

reclength[bid] = knodes[access4].indices[thid] - recstart[bid]+1;
reclength[bid] = knodes[access4].indices[thid] - recstart[bid]+1;
#1# = #1#.#1# - #1#+1;
#1# = #2# - #1#+1;
#1# = #2# - #1#+1;
#1# = #2# - #1#+1;
#1#    =    #2#    -    #1# + 1 ; 
#1#    =    #2#    -    #1# + 1 ; 
#1#    =    #2#    -    #1# +#0#; 
#1#=#2#-#1#+#0#;
1=2-1+0
In While

Start Index is 2
Length is 7
1=2-1+0
Start Index is 3
Length is 7
1=2-1+0
Start Index is 4
Length is 7
1=2-1+0
1=2-1+0
1=3+0
Start Index is 4
Length is 5
1=3+0
Start Index is 5
Length is 5
1=3+0
In While

Start Index is 3
Length is 5
1=3+0
Start Index is 4
Length is 5
1=3+0
1=3+0
1=4
Start Index is 4
Length is 3
1=4
Time Taken 4

dN[k] = image[i-1 + Nr*j] - Jc;
dN[k] = image[i-1 + Nr*j] - Jc;
#1# = #1# - Jc;
#1# = #1# - Jc;
#1# = #1# - Jc;
#1# = #1# - #0#;
#1#    =    #1#    -    #0# ; 
#1#    =    #1#    -    #0# ; 
#1#    =    #1#    -    #0# ; 
#1#=#1#-#0#;
1=1-0
In While

Start Index is 2
Length is 5
1=1-0
Start Index is 3
Length is 5
1=1-0
Start Index is 4
Length is 5
1=1-0
1=1-0
1=2
Start Index is 4
Length is 3
1=2
Time Taken 2

G2 = (temp1*temp1 + temp2*temp2 + temp3*temp3 + temp4*temp4) / (Jc*Jc);
G2 = (temp1*temp1 + temp2*temp2 + temp3*temp3 + temp4*temp4) / (Jc*Jc);
G2 = (temp1*temp1 + temp2*temp2 + temp3*temp3 + temp4*temp4) / (Jc*Jc);
G2 = (temp1*temp1 + temp2*temp2 + temp3*temp3 + temp4*temp4) / (Jc*Jc);
G2 = (temp1*temp1 + temp2*temp2 + temp3*temp3 + temp4*temp4) / (Jc*Jc);
#0# = (#0#*#0# + #0#*#0# + #0#*#0# + #0#*#0#) / (#0#*#0#);
#0#    =     ( #0# * #0#    +    #0# * #0#    +    #0# * #0#    +    #0# * #0# )     /     ( #0# * #0# )  ; 
#0#    =     ( #0# * #0#    +    #0# * #0#    +    #0# * #0#    +    #0# * #0# )     /     ( #0# * #0# )  ; 
#0#    =     ( #0# * #0#    +    #0# * #0#    +    #0# * #0#    +    #0# * #0# )     /     ( #0# * #0# )  ; 
#0#=(#0#*#0#+#0#*#0#+#0#*#0#+#0#*#0#)/(#0#*#0#);
0=(0*0+0*0+0*0+0*0)/(0*0)
In While

Start Index is 2
Length is 25
0=(0*0+0*0+0*0+0*0)/(0*0)
Start Index is 3
Length is 25
0=(0*0+0*0+0*0+0*0)/(0*0)
Start Index is 4
Length is 25
0=(0*0+0*0+0*0+0*0)/(0*0)
Start Index is 5
Length is 25
0=(0*0+0*0+0*0+0*0)/(0*0)
0=(0*0+0*0+0*0+0*0)/(0*0)
0=(1+0*0+0*0+0*0)/(0*0)
Start Index is 5
Length is 23
0=(1+0*0+0*0+0*0)/(0*0)
Start Index is 6
Length is 23
0=(1+0*0+0*0+0*0)/(0*0)
Start Index is 7
Length is 23
0=(1+0*0+0*0+0*0)/(0*0)
0=(1+0*0+0*0+0*0)/(0*0)
0=(1+1+0*0+0*0)/(0*0)
Start Index is 7
Length is 21
0=(1+1+0*0+0*0)/(0*0)
Start Index is 8
Length is 21
0=(1+1+0*0+0*0)/(0*0)
Start Index is 9
Length is 21
0=(1+1+0*0+0*0)/(0*0)
0=(1+1+0*0+0*0)/(0*0)
0=(1+1+1+0*0)/(0*0)
Start Index is 9
Length is 19
0=(1+1+1+0*0)/(0*0)
Start Index is 10
Length is 19
0=(1+1+1+0*0)/(0*0)
Start Index is 11
Length is 19
0=(1+1+1+0*0)/(0*0)
0=(1+1+1+0*0)/(0*0)
0=(1+1+1+1)/(0*0)
Start Index is 11
Length is 17
0=(1+1+1+1)/(0*0)
Start Index is 12
Length is 17
0=(1+1+1+1)/(0*0)
Start Index is 13
Length is 17
0=(1+1+1+1)/(0*0)
Start Index is 14
Length is 17
0=(1+1+1+1)/(0*0)
Start Index is 15
Length is 17
0=(1+1+1+1)/(0*0)
0=(1+1+1+1)/(0*0)
0=(1+1+1+1)/(1)
Start Index is 15
Length is 15
0=(1+1+1+1)/(1)
In While

Start Index is 3
Length is 13
0=(1+1+1+1)/1
Start Index is 4
Length is 13
0=(1+1+1+1)/1
Start Index is 5
Length is 13
0=(1+1+1+1)/1
0=(1+1+1+1)/1
0=(2+1+1)/1
Start Index is 5
Length is 11
0=(2+1+1)/1
Start Index is 6
Length is 11
0=(2+1+1)/1
Start Index is 7
Length is 11
0=(2+1+1)/1
0=(2+1+1)/1
0=(2+2)/1
Start Index is 7
Length is 9
0=(2+2)/1
Start Index is 8
Length is 9
0=(2+2)/1
Start Index is 9
Length is 9
0=(2+2)/1
In While

Start Index is 3
Length is 9
0=(2+2)/1
Start Index is 4
Length is 9
0=(2+2)/1
Start Index is 5
Length is 9
0=(2+2)/1
0=(2+2)/1
0=(3)/1
Start Index is 5
Length is 7
0=(3)/1
In While

Start Index is 3
Length is 5
0=3/1
Start Index is 4
Length is 5
0=3/1
0=3/1
0=4
Start Index is 4
Length is 3
0=4
Time Taken 4

u1_r[idx] = u0_r[idx] * ex[t*indexmap[idx]];
u1_r[idx] = u0_r[idx] * #2#;
#1# = #1# * #2#;
#1# = #1# * #2#;
#1# = #1# * #2#;
#1# = #1# * #2#;
#1#    =    #1#    *    #2# ; 
#1#    =    #1#    *    #2# ; 
#1#    =    #1#    *    #2# ; 
#1#=#1#*#2#;
1=1*2
In While

Start Index is 2
Length is 5
1=1*2
Start Index is 3
Length is 5
1=1*2
Start Index is 4
Length is 5
1=1*2
1=1*2
1=3
Start Index is 4
Length is 3
1=3
Time Taken 3

offset_2[bid] = knodes[access3].indices[thid] + efc + adasd + 4 + knodes[access3].indices[thid];
offset_2[bid] = knodes[access3].indices[thid] + efc + adasd + 4 + knodes[access3].indices[thid];
#1# = #1#.#1# + efc + adasd + 4 + #1#.#1#;
#1# = #2# + efc + adasd + 4 + #2#;
#1# = #2# + efc + adasd + 4 + #2#;
#1# = #2# + #0# + #0# + 4 + #2#;
#1#    =    #2#    +    #0#    +    #0#    +    4    +    #2# ; 
#1#    =    #2#    +    #0#    +    #0#    +    4    +    #2# ; 
#1#    =    #2#    +    #0#    +    #0#    +   #0#   +    #2# ; 
#1#=#2#+#0#+#0#+#0#+#2#;
1=2+0+0+0+2
In While

Start Index is 2
Length is 11
1=2+0+0+0+2
Start Index is 3
Length is 11
1=2+0+0+0+2
Start Index is 4
Length is 11
1=2+0+0+0+2
1=2+0+0+0+2
1=3+0+0+2
Start Index is 4
Length is 9
1=3+0+0+2
Start Index is 5
Length is 9
1=3+0+0+2
Start Index is 6
Length is 9
1=3+0+0+2
1=3+0+0+2
1=3+1+2
Start Index is 6
Length is 7
1=3+1+2
Start Index is 7
Length is 7
1=3+1+2
In While

Start Index is 3
Length is 7
1=3+1+2
Start Index is 4
Length is 7
1=3+1+2
1=3+1+2
1=4+2
Start Index is 4
Length is 5
1=4+2
Start Index is 5
Length is 5
1=4+2
In While

Start Index is 3
Length is 5
1=4+2
Start Index is 4
Length is 5
1=4+2
1=4+2
1=5
Start Index is 4
Length is 3
1=5
Time Taken 5

