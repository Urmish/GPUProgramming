Coalescing - Verify Fix
----------------------

Test 3 - knodes[currKnode[bid]] is the issue. Although the access is of type A[B[i]], currKnode[bid] is constant across iteration. As a result we get a coalescing ratio of 3 while actually it is 4.
  ans[bid].value = records[knodes[currKnode[bid]].indices[thid]].value; changed to 
  int access2 = currKnode[bid];
  int access5 = knodes[access2].indices[thid];  
  ans[bid].value = records[access5].value;
  


Talk to Newsha/Karu About this
----------------------------------------------------------------------------------------------------------------

Test 20 - dN[k] = image[i-1 + Nr*j] - Jc not parsing them correctly for now. Need more sophisticated mechanism to parse it. Could code, depends on time/deadline!!! Problem - j is constant, as a result, the offset remains constant and incremented by 1. This understanding is lacking in the parser
Test21 - Similar issue as Test20
Test23 - Similar issue as Test20


---------------------------------------------------------------------------------------------------------
Fixed (Coalescing) - Verify again
Test 5 - I feel the Parser is right. It is an aligned access so each warp would generate more than one global memory transaction for every load.
Test 6 - Similar problem like Test 5 
Test 7 - Similar problem like Test 7
